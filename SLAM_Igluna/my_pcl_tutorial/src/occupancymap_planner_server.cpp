/*
This ROS service uses a 2D grid map (generated by "occupancy_generator" ROS service) and a database of detected objects (generated by "ar_tracker_saver.cpp")
to create the HDDL problem file used by the TASK planner algorithm.
This is the latest version that shall be used.
Several parameters are available:
-file_in_map (txt file generated by occupancy_generator or by occupancy_saver)
-file_in_artag (txt file generated by ar_tracker_saver.cpp")
-file_out
-resolution_discretized (in meter, wanted discretization for the cell of the plan)
-threshold_occupied (0.6)
-threshold_unknown (0.4)
-how_many_layers_removed (integer, if you want to remove the external border of the map because walls or something like that that shall be removed from plan)
-how_many_max_intermediary_waypoints (let's say you need to travel 3 unit distance from objective A to objective B. If this parameter is below 2,
then the travel from A to B won't be listed in the problem file. It is mainly used to reduce the complexity of the graph of the problem file, to ease the 
task planner algorithm execution)
*/

#include "ros/ros.h"
#include "my_pcl_tutorial/occupancymap_planner.h"

#include <cmath>
#include <vector>

#include <stdio.h>
#include <stdlib.h>

#include <iomanip> //used for formatting outputs
#include <iostream>
#include <fstream>

//Chosen row/column convention to read the grid map
std::vector<std::vector<int8_t>> map_matrix(std::vector<int8_t> list, int width, int height){
std::vector<std::vector<int8_t>> matrix(height,std::vector<int8_t>(width));
if (list.size()!=width*height) ROS_INFO("problem");
for (unsigned int j=0; j!=width;j++){
for (unsigned int i=0;i!=height;i++){
matrix[i][j]=list[i*width+j];}}
return matrix;
}

int check_neighbors(int i1,int j1,int i2,int j2,std::vector<std::vector<int8_t>> matrix){
int path=0;
if (matrix[i1][j1]!=0 or matrix[i2][j2]!=0){
path=100;}
return path;}


//The chosen convention to index the grid map cells is the matrix "row/column" convention so 
//that means the axis y is read on the vertical axis which corresponds to the index i of rows of our matrix
//and the x is read on columns "j" indexes
//(0,0) is the origin minx, miny of the map.
std::vector<int> xytoindex(double x,double y,double origin_x,double origin_y,double resolution){
int i,j;
//Colonne
float cell_x= (x-origin_x)/resolution -1/2; //normalement compris entre j-1 et j
if (cell_x<=0) j=0;
else j= int(cell_x)+1;
//Ligne
float cell_y= (y-origin_y)/resolution -1/2; //normalement compris entre i-1 et i
if (cell_y<=0) i=0;
else i= int(cell_y)+1;
std::vector<int> index(2);
index[0]=i;
index[1]=j;
return index;
}

bool searchforindex(std::vector<int> index, std::vector<std::vector<int>> list){
bool controler=true;
for(unsigned int i=0;i!=list.size();i++){
if (list[i][0]==index[0] and list[i][1]==index[1]) controler=false;}
return controler;
}


bool map_planner(my_pcl_tutorial::occupancymap_planner::Request  &req,
               my_pcl_tutorial::occupancymap_planner::Response &res)
{

// Initialization

ROS_INFO("request: file_in_map=%s, file_in_artag=%s, file_out=%s, resolution_discretized=%lf, thr_occ=%lf, thr_unknown=%lf, how_many_layers_removed=%d, how_many_max_intermediary_waypoints=%d", req.file_in_map.c_str(), req.file_in_artag.c_str(), req.file_out.c_str(), req.resolution_discretized,req.thr_occ,req.thr_unknown, req.how_many_layers_removed,req.how_many_max_intermediary_waypoints);


//Databases initialization
        std::string wid,hei,frame_id,reso; //variables from file are here
        std::string cell;
        std::string data=req.file_in_map;
        int width;
        int height;
        double resolution;
        std::vector<int8_t> occupancygridlist;
        double origin_x,origin_y;
//Reading Database 1
        std::ifstream database(data); //opening the file.
        if (database.is_open()) //if the file is open
        {
                ROS_INFO("Reading the map");
                getline(database, reso, '\n');
                resolution=stof(reso);
                getline(database, wid, '\n');
                width=stoi(wid);
                getline(database,hei,'\n');
                height=stoi(hei);
                getline(database,frame_id,'\n');
                std::string line;
                getline(database,line,'\n');
                origin_x=stof(line);
                getline(database,line,'\n');
                origin_y=stof(line);

                while (true)
                {
                        getline(database, cell, ' ');
                        if (database.eof()) break;
                        occupancygridlist.push_back(stoi(cell));
                }
                ROS_INFO("Reading finished, closing the map file");
                database.close(); //closing the file
        }
        else ROS_INFO("Unable to open map file"); //if the file is not open output

//Discretization of initial grid map
double res_discret=req.resolution_discretized;
int cotes= res_discret/resolution+1;
int rectangle_large=width/cotes;
int restant_large=width-rectangle_large*cotes;
int rectangle_haut=height/cotes;
int restant_haut=height-rectangle_haut*cotes;
if(restant_haut!=0){
rectangle_haut+=1;}
if (restant_large!=0){
rectangle_large+=1;}
std::vector<std::vector<int>> mapdiscret(rectangle_large*rectangle_haut, std::vector<int>(3));
std::cout<< "\n Information about discretized grid map: \n";
std::cout<< "resolution=";
ROS_INFO( "%lf", cotes*resolution);
std::cout<< " width=";
ROS_INFO("%d", rectangle_large);
std::cout<< " height=";
ROS_INFO("%d", rectangle_haut);

for (unsigned i=0;i!=height;i++){
for(unsigned j=0;j!=width;j++){
int x=i/cotes;
int y=j/cotes;
mapdiscret[y+x*rectangle_large][0]+=1;
if (occupancygridlist[j+width*i]==100) mapdiscret[y+x*rectangle_large][1]+=1;
if(occupancygridlist[j+width*i]==-1) mapdiscret[y+x*rectangle_large][2]+=1;
}}
std::vector<int8_t> griddiscret(rectangle_large*rectangle_haut);
for (unsigned i=0; i!=rectangle_large*rectangle_haut;i++){
double percentage_occ;
double percentage_unknown;
if (mapdiscret[i][2]!=mapdiscret[i][0]){
percentage_occ=mapdiscret[i][1]/double(mapdiscret[i][0]-mapdiscret[i][2]);
percentage_unknown=mapdiscret[i][2]/double(mapdiscret[i][0]);}
else {
percentage_occ=0;
percentage_unknown=1;}
if (percentage_occ>=req.thr_occ) griddiscret[i]=100;
else if(percentage_unknown>=req.thr_unknown) griddiscret[i]=-1;}

double threshold_free=25;
double threshold_occupied=65;

  //Remove Borders
//how many layers do you want to be removed 
int layers_removed=req.how_many_layers_removed;
int new_width=rectangle_large-2*layers_removed;
int new_height=rectangle_haut-2*layers_removed;
std::vector<int8_t> mapborders(new_width*new_height);
for (unsigned int i=layers_removed;i!=rectangle_haut-layers_removed;i++){
for(unsigned int  j=layers_removed;j!=rectangle_large-layers_removed;j++){
mapborders[(i-layers_removed)*new_width+(j-layers_removed)]=griddiscret[i*rectangle_large+j];
}}

rectangle_haut=new_height;
rectangle_large=new_width;
origin_x+=layers_removed*cotes*resolution;
origin_y+=layers_removed*cotes*resolution;

//As a pgm file 

std::string mapdatafile_discret = req.file_out + "_discretizedplan.pgm";
      ROS_INFO("Writing map occupancy data to %s", mapdatafile_discret.c_str());
      FILE* out_discret = fopen(mapdatafile_discret.c_str(), "w");
      if (!out_discret)
      {
        ROS_INFO( "Couldn't save map file to %s", mapdatafile_discret.c_str());
        return 0;
      }

      fprintf(out_discret, "P5\n# CREATOR: Grid_map_generator.cpp %.3f m/pix\n%d %d\n255\n",
              cotes*resolution, rectangle_large, rectangle_haut);
        for(unsigned int i=0;i!=rectangle_haut;i++){
        for(unsigned int j=0;j!=rectangle_large;j++){
        unsigned int x=j+rectangle_large*(rectangle_haut-1-i);
          if (mapborders[x] >= 0 && mapborders[x] <= threshold_free) { // Free is 254 : white
            fputc(254, out_discret);
          } else if (mapborders[x] >= threshold_occupied) { // Occupied is black : 000
            fputc(000, out_discret);
          } else { //unknown is 205 gray scale
            fputc(205, out_discret);
        }
          }
        }
      fclose(out_discret);


      std::string mapmetadatafile_discret = req.file_out + "_discretizedplan.yaml";
      ROS_INFO("Writing map occupancy data to %s", mapmetadatafile_discret.c_str());
      FILE* yaml_discret = fopen(mapmetadatafile_discret.c_str(), "w");


      fprintf(yaml_discret, "image: %s\nresolution: %f\norigin: [%f, %f, %f]\nnegate: 0\noccupied_thresh: 0.65\nfree_thresh: 0.196\n\n",
              mapdatafile_discret.c_str(), cotes*resolution,origin_x ,origin_y , 0.);

      fclose(yaml_discret);


//In a txt file 


 //Create a matrix map out of the discretized map
std::vector<std::vector<int8_t>> matrix= map_matrix(mapborders, rectangle_large,rectangle_haut);
std::string can_traverse;
std::string can_traverse_drone;


//Can traverse for every cell is not considered anymore. We are gonna try to link the waypoints that are corresponding to an objective only.
/*
//Can traverse east-west ?
for(int i=0;i!=rectangle_haut;i++){
for (int j=0;j!=rectangle_large-1;j++){
can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string(i*rectangle_large+j));
can_traverse_drone.append(" waypoint");
can_traverse_drone.append(std::to_string(i*rectangle_large+j+1));
can_traverse_drone.append(")\n");
can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string(i*rectangle_large+j+1));
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(std::to_string(i*rectangle_large+j));
can_traverse_drone.append(")\n");
if(matrix[i][j]==0){
if(matrix[i][j+1]==0){
can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string(i*rectangle_large+j));
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string(i*rectangle_large+j+1));
can_traverse.append(")\n");
can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string(i*rectangle_large+j+1));
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string(i*rectangle_large+j));
can_traverse.append(")\n");
}}}}
//Can traverse north-south ?
for(int i=0;i!=rectangle_haut-1;i++){
for (int j=0;j!=rectangle_large;j++){
can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string(i*rectangle_large+j));
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(std::to_string((i+1)*rectangle_large+j));
can_traverse_drone.append(")\n");
can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string((i+1)*rectangle_large+j));
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(std::to_string(i*rectangle_large+j));
can_traverse_drone.append(")\n");
if(matrix[i][j]==0){
if(matrix[i+1][j]==0){
can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string(i*rectangle_large+j));
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string((i+1)*rectangle_large+j));
can_traverse.append(")\n");
can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string((i+1)*rectangle_large+j));
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string(i*rectangle_large+j));
can_traverse.append(")\n");
}}}}
 //Can traverse diagonal (northwest/southeast) ?
for ( int i=0;i!=rectangle_haut-1;i++){
for ( int j=1;j!=rectangle_large;j++){
can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string(i*rectangle_large+j));
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(std::to_string((i+1)*rectangle_large+j-1));
can_traverse_drone.append(")\n");
can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string((i+1)*rectangle_large+j-1));
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(std::to_string(i*rectangle_large+j));
can_traverse_drone.append(")\n");
if(matrix[i][j]==0){
if(check_neighbors(i,j-1,i+1,j,matrix)==0){
if(matrix[i+1][j-1]==0){
can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string(i*rectangle_large+j));
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string((i+1)*rectangle_large+j-1));
can_traverse.append(")\n");
can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string((i+1)*rectangle_large+j-1));
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string(i*rectangle_large+j));
can_traverse.append(")\n");
}}}}}
//Can traverse anti-diagonal (northeast/southwest) ?
for (int i=0;i!=rectangle_haut-1;i++){
for (int j=0;j!=rectangle_large-1;j++){
can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string(i*rectangle_large+j));
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(std::to_string((i+1)*rectangle_large+j+1));
can_traverse_drone.append(")\n");
can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string((i+1)*rectangle_large+j+1));
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(std::to_string(i*rectangle_large+j));
can_traverse_drone.append(")\n");
if(matrix[i][j]==0){
if(check_neighbors(i+1,j,i,j+1,matrix)==0){
if(matrix[i+1][j+1]==0){
can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string(i*rectangle_large+j));
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string((i+1)*rectangle_large+j+1));
can_traverse.append(")\n");
can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string((i+1)*rectangle_large+j+1));
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string(i*rectangle_large+j));
can_traverse.append(")\n");
}}}}}
*/



  
//Objectives as AR tag
//Reading the AR tag database
        std::string ID, POSITION_X,POSITION_Y,POSITION_Z,POSITION_CONFIDENCE; //variables from file are here
        std::vector<int> ID_v;
        std::vector<int>POSITION_CONFIDENCE_v;
        std::vector<float>POSITION_X_v,POSITION_Y_v;

        //input filename
        std::string filenametag=req.file_in_artag;

        //number of lines
        std::ifstream datatag(filenametag); //opening the file.
        if (datatag.is_open()) //if the file is open
        {
                //ignore first line
                std::string lines;
                getline(datatag, lines);

                while (true)
                {
                        getline(datatag, ID, ',');
                        if (datatag.eof()) break;
                        ID_v.push_back(stoi(ID));
                        getline(datatag, POSITION_CONFIDENCE, ',');
                        getline(datatag, POSITION_X, ',');
                        POSITION_X_v.push_back(stof(POSITION_X));
                        getline(datatag, POSITION_Y, ',');
                        POSITION_Y_v.push_back(stof(POSITION_Y));
                        getline(datatag, POSITION_Z, '\n');
                        /*POSITION_Z_v.push_back(stof(POSITION_Z));
                        getline(datatag, QUATERNION_X, ',');
                        QUATERNION_X_v.push_back(stof(QUATERNION_X));
                        getline(datatag, QUATERNION_Y, ',');
                        QUATERNION_Y_v.push_back(stof(QUATERNION_Y));
                        getline(datatag, QUATERNION_Z, ',');
                        QUATERNION_Z_v.push_back(stof(QUATERNION_Z));
                        getline(datatag, QUATERNION_W, '\n');
                        QUATERNION_W_v.push_back(stof(QUATERNION_W));*/

                }
                datatag.close(); //closing the file
        }
        else std::cout << "Unable to open AR tag database file"; //if the file is not open output

ROS_INFO("OBJECTIVES");
std::string objectives;
std::string visible_objectives_drone;
std::string visible_objectives_rover;
std::vector<int> index;
//Take Waypoints that are only corresponding to a AR tag objective
std::string waypoints;
std::vector<std::vector<int>> indexsobjectives;
for  (int i=0;i!=ID_v.size();i++){
if(ID_v[i]<=60 and ID_v[i]>=0){


index=xytoindex(POSITION_X_v[i],POSITION_Y_v[i],origin_x,origin_y,resolution*cotes);
if(index[0]<=rectangle_haut-1 and index[1]<=rectangle_large-1){
//Check if this objective falls into a waypoint that already contains an objective.
if (searchforindex(index,indexsobjectives)==true){
indexsobjectives.push_back(index);
waypoints.append("waypoint");
waypoints.append(std::to_string(index[0]*rectangle_large+index[1]));
waypoints.append(" - waypoint\n");
visible_objectives_rover.append("(visible_from objective");
visible_objectives_rover.append(std::to_string(ID_v[i]));
visible_objectives_rover.append(" waypoint");
visible_objectives_rover.append(std::to_string(index[0]*rectangle_large+index[1]));
visible_objectives_rover.append(" rover0)\n");
visible_objectives_drone.append("(visible_from objective");
visible_objectives_drone.append(std::to_string(ID_v[i]));
visible_objectives_drone.append(" waypoint");
visible_objectives_drone.append(std::to_string(index[0]*rectangle_large+index[1]));
visible_objectives_drone.append(" drone1)\n");
objectives.append("objective");
objectives.append(std::to_string(ID_v[i]));
ROS_INFO("Waypoint number : %d",ID_v[i]);
objectives.append(" - objective\n");
}}}}

//Can traverse new version with objectives graph
std::vector<std::vector<int>> interm(indexsobjectives.size(),std::vector<int>(2));
std::vector<std::vector<std::vector<int>>> distancesobjectives(indexsobjectives.size(),interm);
//This is a table in which the cell (i,j) contain the information relative to the distance between objective i and objective j
//The cell [i][j] contains a pair (a,b) where a is the distance between i,j from which the distance b is traveled as a diagonal
int unit_distance=rectangle_large;
ROS_INFO("Size objective list %d",indexsobjectives.size());
for(unsigned int i=0;i!=indexsobjectives.size()-1;i++){
for(unsigned int j=i+1;j!=indexsobjectives.size();j++){
//Distance between objective i and objective j
int dist_x=indexsobjectives[i][1]-indexsobjectives[j][1];
if (dist_x<0) dist_x=-dist_x;
int dist_y=indexsobjectives[i][0]-indexsobjectives[j][0];
if (dist_y<0) dist_y=-dist_y;
if (dist_x<=dist_y) {
distancesobjectives[i][j][0]=dist_y;
distancesobjectives[i][j][1]=dist_x;}
if (dist_x>dist_y) {
distancesobjectives[i][j][0]=dist_x;
distancesobjectives[i][j][1]=dist_y;
}
if (distancesobjectives[i][j][0]<unit_distance) unit_distance=distancesobjectives[i][j][0];
}}
//Because every objectives are in a different cell, we ensure unit_distance to be different from 0 (the case where 2 objectives are in the same cell)


for(unsigned int i=0;i!=indexsobjectives.size()-1;i++){
for(unsigned int j=i+1;j!=indexsobjectives.size();j++){
std::vector<int> indexi(2),indexj(2);
indexi[0]=indexsobjectives[i][0];
indexi[1]=indexsobjectives[i][1];
indexj[0]=indexsobjectives[j][0];
indexj[1]=indexsobjectives[j][1];
int distance_ij_rover=distancesobjectives[i][j][0];
double distance_ij_rover_normalized;
double distance_ij_drone_normalized;
//If the path is a pure diagonal, check if its free path for the rover
//If there is an  obstacle on the way then add +1 to the distance
if(distancesobjectives[i][j][1]==distancesobjectives[i][j][0]){
//Check the direction of the diagonal from objective i to objective j
int east=1;
int north=1;
if(indexi[0]>indexj[0]){
north=-1;}
if(indexi[1]>indexj[1]){
east=-1;}
int a=0;
bool obstacle=false;

while(a<=(distancesobjectives[i][j][0]-1) and (obstacle==false)){

//Check if there is an obstacle on the sub-diagonals that would block the diagonal path
if(matrix[indexi[0]+north*(a+1)][indexi[1]+east*a]!=0 or matrix[indexi[0]+a*north][indexi[1]+east*(a+1)]!=0)obstacle=true;
//Check if there is an obstacle on the diagonal itself

if(a!=0){
if(matrix[indexi[0]+north*a][indexi[1]+east*a]!=0) obstacle=true;}
//We suppose that the distance can be only be increased of 1 cell in case of an obstacle on the path
//because then it becomes a non pure diagonal path and we make a supposition on non pure diagonal path (see below)
a+=1;
}
if (obstacle==true) distance_ij_rover+=1;
}
//We suppose in the case of non pure diagonal path, that there are enough possibilities for the system to reach
//the other objective without encountering an obstacle


//Normalized distances with unit_distance
distance_ij_rover_normalized=distance_ij_rover/unit_distance;
distance_ij_drone_normalized=distancesobjectives[i][j][0]/unit_distance;
int drone_more=-1;
//Now that we have the normalized distances, check if we need to add intermediary waypoints for the drone
if(distance_ij_drone_normalized>3){
int how_many_more_drone=int((distance_ij_drone_normalized-0.05)/3);
if(how_many_more_drone<=req.how_many_max_intermediary_waypoints){

drone_more=how_many_more_drone;
//Adding imaginary waypoints just to tell the task planner that there is some more distance to travel between objective i and j
std::string  unique_waypoint_id=std::to_string(i)+"_"+std::to_string(j)+"_"+"1";

waypoints.append("waypoint");
waypoints.append(unique_waypoint_id);
waypoints.append(" - waypoint\n");

can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string(indexi[0]*rectangle_large+indexi[1]));
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(unique_waypoint_id);
can_traverse_drone.append(")\n");

can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(unique_waypoint_id);
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(std::to_string(indexi[0]*rectangle_large+indexi[1]));
can_traverse_drone.append(")\n");
for (int adding=2;adding!=how_many_more_drone+1;adding++){
std::string unique_waypoint_new=std::to_string(i)+"_"+std::to_string(j)+"_"+std::to_string(adding);
waypoints.append("waypoint");
waypoints.append(unique_waypoint_new);
waypoints.append(" - waypoint\n");

can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(unique_waypoint_id);
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(unique_waypoint_new);
can_traverse_drone.append(")\n");
can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(unique_waypoint_new);
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(unique_waypoint_id);
can_traverse_drone.append(")\n");
unique_waypoint_id=unique_waypoint_new;
}

can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(unique_waypoint_id);
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(std::to_string(indexj[0]*rectangle_large+indexj[1]));
can_traverse_drone.append(")\n");

can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string(indexj[0]*rectangle_large+indexj[1]));
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(unique_waypoint_id);
can_traverse_drone.append(")\n");

}
//or if the drone can immediatly traverse from i to j
if (distance_ij_drone_normalized<=2){
can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string(indexi[0]*rectangle_large+indexi[1]));
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(std::to_string(indexj[0]*rectangle_large+indexj[1]));
can_traverse_drone.append(")\n");

can_traverse_drone.append("(can_traverse drone1 waypoint");
can_traverse_drone.append(std::to_string(indexj[0]*rectangle_large+indexj[1]));
can_traverse_drone.append(" waypoint"); 
can_traverse_drone.append(std::to_string(indexi[0]*rectangle_large+indexi[1]));
can_traverse_drone.append(")\n");
}
}

//Now that we have the normalized distances, check if we need to add intermediary waypoints for the rover
if(distance_ij_rover_normalized>2){
int how_many_more=int((distance_ij_rover_normalized-0.05)/2);
if(how_many_more <=req.how_many_max_intermediary_waypoints){
//Adding imaginary waypoints just to tell the task planner that there is some more distance to travel between objective i and j
std::string unique_waypoint_id=std::to_string(i)+"_"+std::to_string(j)+"_"+"1";

can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string(indexi[0]*rectangle_large+indexi[1]));
can_traverse.append(" waypoint"); 
can_traverse.append(unique_waypoint_id);
can_traverse.append(")\n");

can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(unique_waypoint_id);
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string(indexi[0]*rectangle_large+indexi[1]));
can_traverse.append(")\n");


for (int adding=2;adding!=how_many_more+1;adding++){
std::string unique_waypoint_new=std::to_string(i)+"_"+std::to_string(j)+"_"+std::to_string(adding);

if(adding>=drone_more){
waypoints.append("waypoint");
waypoints.append(unique_waypoint_new);
waypoints.append(" - waypoint\n");}

can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(unique_waypoint_id);
can_traverse.append(" waypoint"); 
can_traverse.append(unique_waypoint_new);
can_traverse.append(")\n");

can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(unique_waypoint_new);
can_traverse.append(" waypoint");
can_traverse.append(unique_waypoint_id);
can_traverse.append(")\n");
unique_waypoint_id=unique_waypoint_new;
}

can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(unique_waypoint_id);
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string(indexj[0]*rectangle_large+indexj[1]));
can_traverse.append(")\n");

can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string(indexj[0]*rectangle_large+indexj[1]));
can_traverse.append(" waypoint"); 
can_traverse.append(unique_waypoint_id);
can_traverse.append(")\n");

}
//or if the rover can immediatly traverse from i to j
if (distance_ij_rover_normalized<=2){
can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string(indexi[0]*rectangle_large+indexi[1]));
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string(indexj[0]*rectangle_large+indexj[1]));
can_traverse.append(")\n");

can_traverse.append("(can_traverse rover0 waypoint");
can_traverse.append(std::to_string(indexj[0]*rectangle_large+indexj[1]));
can_traverse.append(" waypoint"); 
can_traverse.append(std::to_string(indexi[0]*rectangle_large+indexi[1]));
can_traverse.append(")\n");
}
}
}}



can_traverse.append("\n");
can_traverse_drone.append("\n");

//Check if a waypoint is visible from an adjacent cell (for the rover, old consensus)
/*
//Check if on border south
if(index[0]!=0){
if(matrix[index[0]-1][index[1]]==0){
visible_objectives_rover.append("(visible_from objective");
visible_objectives_rover.append(std::to_string(ID_v[i]));
visible_objectives_rover.append(" waypoint");
visible_objectives_rover.append(std::to_string((index[0]-1)*rectangle_large+index[1]));
visible_objectives_rover.append(" rover0)\n");
}}
//Check if on border north
if(index[0]!=rectangle_haut-1){
if(matrix[index[0]+1][index[1]]==0){
visible_objectives_rover.append("(visible_from objective");
visible_objectives_rover.append(std::to_string(ID_v[i]));
visible_objectives_rover.append(" waypoint");
visible_objectives_rover.append(std::to_string((index[0]+1)*rectangle_large+index[1]));
visible_objectives_rover.append(" rover0)\n");
}}
//Check if on border west
if(index[1]!=0){
if(matrix[index[0]][index[1]-1]==0){
visible_objectives_rover.append("(visible_from objective");
visible_objectives_rover.append(std::to_string(ID_v[i]));
visible_objectives_rover.append(" waypoint");
visible_objectives_rover.append(std::to_string((index[0])*rectangle_large+index[1]-1));
visible_objectives_rover.append(" rover0)\n");
}}
//Check if on border east
if(index[1]!=rectangle_large-1){
if(matrix[index[0]][index[1]+1]==0){
visible_objectives_rover.append("(visible_from objective");
visible_objectives_rover.append(std::to_string(ID_v[i]));
visible_objectives_rover.append(" waypoint");
visible_objectives_rover.append(std::to_string((index[0])*rectangle_large+index[1]+1));
visible_objectives_rover.append(" rover0)\n");
}}
*/

objectives.append("\n");
waypoints.append("\n");

  
std::string mapplannertxtdatafile = req.file_out + ".txt";
 ROS_INFO("Writing waypoints data to %s", mapplannertxtdatafile.c_str());
      FILE* txt = fopen(mapplannertxtdatafile.c_str(), "w");
      if (!txt)
      {
        std::cout<< "Couldn't write on %s", mapplannertxtdatafile.c_str();
        return false;
      }
 fprintf(txt,"%s",waypoints.c_str());
 fprintf(txt,"%s",objectives.c_str());
 fprintf(txt,"%s",can_traverse.c_str());
 fprintf(txt,"%s",can_traverse_drone.c_str());
 fprintf(txt,"%s",visible_objectives_rover.c_str());
 fprintf(txt,"%s",visible_objectives_drone.c_str());

 fclose(txt);

   ROS_INFO("Sending back response: The grid map plan was generated") ;
  return true;
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "occupancymap_planner_server");
  ros::NodeHandle n;

  ros::ServiceServer service = n.advertiseService("occupancymap_planner", map_planner);
  ROS_INFO("Ready to generate the grid map plan");
  ros::spin();

  return 0;
}
